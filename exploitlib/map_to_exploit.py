from settings_enabled import is_kaslr_enabled, is_smep_enabled, is_smap_enabled
from find_cve import download_cve_data, parse_cve_data, get_linux_version, get_linux_version_clean, map_cves_to_linux_version

map_cves = {
    'CVE-2017-11176': ["""
                    Exploit Summary:

                        /**
                        * Performs arbitrary read and write operations to gain root privileges by manipulating task structures in memory.
                        * This function attempts to locate the task structure of the calling process and modify its credentials to elevate privileges to root.
                        *
                        * @param kernbase Base address of the kernel where the operations start.
                        * @param arbread Function pointer to perform arbitrary reads from kernel memory.
                        * @param arbwrite Function pointer to perform arbitrary writes to kernel memory.
                        * @return 0 on success, -1 on failure to set credentials or file system pointers.
                        */

                        ===================================================================================================

                    Functions:

                        root_arbrw8:

                        /**
                        * Constructs a Return-Oriented Programming (ROP) chain to perform privilege escalation in the kernel context.
                        * The chain will set up the necessary state to commit new credentials and return to user space safely.
                        *
                        * @param kbase Base address of the kernel, used as an offset for kernel functions and gadgets.
                        * @param rop_ptr Pointer to an array where the ROP chain will be constructed.
                        */

                        build_ropchain:

                        /**
                        * Builds a Return-Oriented Programming (ROP) chain for privilege escalation by leveraging kernel functions.
                        * This function sets up a ROP chain to execute `prepare_kernel_cred` and `commit_creds` with proper registers setup, performs a swapgs and an iretq to return to user mode with escalated privileges.
                        *
                        *
                        * @param kbase (uint64_t): Base address of the kernel in memory.
                        * @param rop_ptr (uint64_t*): Pointer to the start of the buffer where the ROP chain will be written.
                        *
                        * Note:
                        * This function does not return a value but directly modifies the buffer pointed to by `rop_ptr` to contain the ROP chain instructions.
                        */
                    """, 'kaslr off', 'smep on', 'smap off'],
    'CVE-2021-22555': ["""
                    Exploit Summary:

                        /**
                        * Performs arbitrary read and write operations to gain root privileges by manipulating task structures in memory.
                        * This function attempts to locate the task structure of the calling process and modify its credentials to elevate privileges to root.
                        *
                        * @param kernbase Base address of the kernel where the operations start.
                        * @param arbread Function pointer to perform arbitrary reads from kernel memory.
                        * @param arbwrite Function pointer to perform arbitrary writes to kernel memory.
                        * @return 0 on success, -1 on failure to set credentials or file system pointers.
                        */

                        ===================================================================================================

                    Functions:

                        root_arbrw8:

                        /**
                        * Constructs a Return-Oriented Programming (ROP) chain to perform privilege escalation in the kernel context.
                        * The chain will set up the necessary state to commit new credentials and return to user space safely.
                        *
                        * @param kbase Base address of the kernel, used as an offset for kernel functions and gadgets.
                        * @param rop_ptr Pointer to an array where the ROP chain will be constructed.
                        */

                        build_ropchain:

                        /**
                        * Builds a Return-Oriented Programming (ROP) chain for privilege escalation by leveraging kernel functions.
                        * This function sets up a ROP chain to execute `prepare_kernel_cred` and `commit_creds` with proper registers setup, performs a swapgs and an iretq to return to user mode with escalated privileges.
                        *
                        *
                        * @param kbase (uint64_t): Base address of the kernel in memory.
                        * @param rop_ptr (uint64_t*): Pointer to the start of the buffer where the ROP chain will be written.
                        *
                        * Note:
                        * This function does not return a value but directly modifies the buffer pointed to by `rop_ptr` to contain the ROP chain instructions.
                        */
                    """, 'kaslr off', 'smep on', 'smap off'],
}

cve_data = download_cve_data()
cves = parse_cve_data(cve_data)
linux_version = get_linux_version()
linux_version = get_linux_version_clean(linux_version)
# linux_version = "3.1"
applicable_cves = map_cves_to_linux_version(cves, linux_version)

kaslr_enabled = is_kaslr_enabled()
if kaslr_enabled is None:
    kaslr = "Could not determine if KASLR is enabled."
elif kaslr_enabled:
    kaslr = "KASLR is enabled."
else:
    kaslr = "KASLR is not enabled."

smep_enabled = is_smep_enabled()
if smep_enabled is None:
    smep = "Could not determine if SMEP is enabled."
elif smep_enabled:
    smep = "SMEP is enabled."
else:
    smep = "SMEP is not enabled."

# Check for SMAP and SMEP
smap_enabled = is_smap_enabled()
if smap_enabled is None:
    smap = "Could not determine if SMAP is enabled."
elif smap_enabled:
    smap = "SMAP is enabled."
else:
    smap = "SMAP is not enabled."


for k, v in map_cves.items():
    if k in list(applicable_cves['cve_id']):
        print("\n\n\nPOSSIBLE EXPLOITS FOUND in exploits.c\n")
        print(k+"\n")
        print(v[0])
        print(f"\n Exploit Requires: {v[1]}, {v[2]}, {v[3]}\n")
        print(f"Your system settings: \n {kaslr} \n {smep} \n {smap} \n")
