./HTB/Boxes/Retired/RopeTwo/kernel
./pgit/projects/kernel
^C
ion@hilbert:~$ cd ./HTB/Boxes/Retired/RopeTwo/kernel
ion@hilbert:~/HTB/Boxes/Retired/RopeTwo/kernel$ ls
compile.sh  cpuinfo.txt  extract_exec.py  kernel_config.txt  notes.txt  ralloc.ko  rope  rope.c  script.gdb  user_compile.sh  vmlinux  vmlinuz
ion@hilbert:~/HTB/Boxes/Retired/RopeTwo/kernel$ cat kernel_config.txt 
uname -a:
Linux rope2 5.0.0-38-generic #41-Ubuntu SMP Tue Dec 3 00:27:35 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux

cat /etc/lsb-release:
DISTRIB_ID=Ubuntu
DISTRIB_RELEASE=19.04
DISTRIB_CODENAME=disco
DISTRIB_DESCRIPTION="Ubuntu 19.04"

cat /proc/cmdline:
BOOT_IMAGE=/boot/vmlinuz-5.0.0-38-generic root=UUID=8e0d770e-1647-4f8e-9d30-765ce380f9b7 ro maybe-ubiquity nosmap
ion@hilbert:~/HTB/Boxes/Retired/RopeTwo/kernel$ cd ..
ion@hilbert:~/HTB/Boxes/Retired/RopeTwo$ ls
kernel  online
ion@hilbert:~/HTB/Boxes/Retired/RopeTwo$ cd ~/pgit/projects/kernel/
ion@hilbert:~/pgit/projects/kernel$ ls
arbrw  dockesc  notes.txt  src  vmlinux  vuln  zerocount
ion@hilbert:~/pgit/projects/kernel$ cat notes.txt 
target VM setup in virtualbox
----------------------------------------------------
Enable kgdb without source:
change /etc/default/grub to contain GRUB_CMDLINE_LINUX="kgdboc=ttyS0,115200" and GRUB_CMDLINE_LINUX_DEFAULT="consoleblank=0 nokaslr"
to debug over serial port /dev/ttyS0

Other options in the grub config include kgdbwait (break at system boot)

run update-grub to commmit these changes, which should show up in /boot/grub/grub.cfg

Enable kgdb with source:
Will figure this out later

Serial port: Target connects to existing serial port opened by debugger

Debug interrupts must be enabled: the command grep -i CONFIG_MAGIC_SYSRQ /boot/config-$(uname -r) should output
CONFIG_MAGIC_SYSRQ=y
CONFIG_MAGIC_SYSRQ_DEFAULT_ENABLE=0x01b6
CONFIG_MAGIC_SYSRQ_SERIAL=y

To enable easy system interrupts, /proc/sys/kernel/sysrq must be 1, do this with echo "kernel.sysrq = 1" >> /etc/sysctl.d/99-sysctl.conf
sysretq can be triggered by echo g > /proc/sysrq-trigger

Optionally, access to dmesg can be made unrestricted with:
echo "kernel.dmesg_restrict = 0" >> /etc/sysctl.d/90-security.conf
--------------------------------------------------------

debugger VM setup in virtualbox
--------------------------------------------------------
Debugger VM opens serial port for target to connect

Make IO on serial port raw:
stty -F /dev/ttyS0 raw -echo
socat -d -d /dev/ttyS0 pty &

The last command returns a pt as /dev/pts/X

To connect gdb to target, run the interrupt on target first and then subsequently start gdb in the debugger VM, connecting with target remote /dev/pts/X (same X as before)
