import os
import requests
import re
import subprocess
import pandas as pd
from bs4 import BeautifulSoup

def download_cve_data():
    url = 'https://raw.githubusercontent.com/nluedtke/linux_kernel_cves/master/data/CVEs.txt'
    response = requests.get(url)
    if response.status_code == 200:
        return response.text
    else:
        raise Exception("Failed to download CVE data")

def parse_cve_data(cve_data):
    cve_entries = {}
    for line in cve_data.splitlines():
        if line.strip():
            match = re.match(r'(CVE-\d{4}-\d+): ([\w\(n/a\)]+) - ([\w]+) \((.*?)\)', line.strip())
            if match:
                cve_id = match.group(1)
                commit_range = match.group(2) + " - " + match.group(3)
                versions = match.group(4)
                cve_entries[cve_id] = {'commit_range': commit_range, 'versions': versions}
    return cve_entries

def parse_commit_ids(cve_data):
    commit_ids = []
    for line in cve_data.splitlines():
        parts = line.split(': ')
        if len(parts) > 1:
            commit_part = parts[1].split(' ')[0]
            if '-' in commit_part:
                commit_ids.extend(commit_part.split('-'))
    return commit_ids

def get_linux_version():
    try:
        output = subprocess.check_output(['uname', '-r'], stderr=subprocess.STDOUT)
        return output.decode().strip()
    except subprocess.CalledProcessError as e:
        raise Exception("Could not determine Linux version: " + str(e))

def get_linux_version_clean(version):
    try:
        version_pattern = re.compile(r'\d+\.\d+')
        clean_version = version_pattern.search(version)
        if clean_version:
            clean_version = clean_version.group()
            return clean_version
        else:
            raise Exception("Could not determine Linux version: " + str(e))
    except subprocess.CalledProcessError as e:
        raise Exception("Could not determine Linux version: " + str(e))
    
def get_commit_msg(commit_id):
    url = f'https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id={commit_id}'
    response = requests.get(url)
    if response.status_code == 200:
        soup = BeautifulSoup(response.text, 'html.parser')
        commit_msg_div = soup.find('div', class_='commit-msg')
        if commit_msg_div:
            return commit_msg_div.get_text(strip=True)
        else:
            return "No commit message found."
    else:
        return "Failed to fetch commit page."

def map_cves_to_linux_version(cves, linux_version):
    applicable_cves = []
    version_pattern = re.compile(r'v(\d+\.\d+)')
    for cve_id, info in cves.items():
        if 'to' in info['versions']:
            versions_range = info['versions'].split(' to ')
            if len(versions_range) == 2:
                start_ver = version_pattern.search(versions_range[0])
                end_ver = version_pattern.search(versions_range[1])
                if start_ver and end_ver:
                    start_ver = start_ver.group().replace('v','')
                    end_ver = end_ver.group().replace('v','')
                    if float(start_ver) <= float(linux_version) <= float(end_ver):
                        commit_range = info['commit_range']
                        commit_range = commit_range.split(' - ')
                        if len(commit_range) == 2:
                            c1 = commit_range[0]
                            c2 = commit_range[1]
                        else:
                            c1 = ""
                            c2 - ""
                        applicable_cves.append([cve_id,start_ver,end_ver, c1, c2])
    df = pd.DataFrame(applicable_cves, columns = ['cve_id', 'start_ver', 'end_ver','break_commit_id','fix_commit_id']) 
    return df