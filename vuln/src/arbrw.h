#define ARBREAD 5
#define ARBWRITE 6

//structs for arbitrary read/write vuln
struct arbrw {
	void *kptr;
	void *userptr;
};

int init_arbrw(void) {
	//using the user struct exclusively to read/write a uint64 without allocating/freeing kernel memory
	return SUCCESS;
}
 
static long arbrw_ioctl(struct file *file, unsigned int cmd, unsigned long arg) {
	struct arbrw user;

	//get user struct from user
	if(copy_from_user((void *)&user, (const void *)arg, sizeof(user))) {
		return ERROR;
	}

	//perform the arbitrary read or write and return ERROR on failure, SUCCESS on success	
	if (cmd == ARBREAD) {
		if (copy_to_user(user.userptr, user.kptr, sizeof(unsigned long))) {
			return ERROR;
		}
	}
	if (cmd == ARBWRITE) {
		if (copy_from_user(user.kptr, user.userptr, sizeof(unsigned long))) {
			return ERROR;
		}
	}
	
	return SUCCESS;
}

void cleanup_arbrw(void) {
	//no memory is allocated for this vuln
}
